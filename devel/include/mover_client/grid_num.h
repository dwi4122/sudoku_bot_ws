// Generated by gencpp from file mover_client/grid_num.msg
// DO NOT EDIT!


#ifndef MOVER_CLIENT_MESSAGE_GRID_NUM_H
#define MOVER_CLIENT_MESSAGE_GRID_NUM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mover_client
{
template <class ContainerAllocator>
struct grid_num_
{
  typedef grid_num_<ContainerAllocator> Type;

  grid_num_()
    : row(0)
    , col(0)
    , num(0)  {
    }
  grid_num_(const ContainerAllocator& _alloc)
    : row(0)
    , col(0)
    , num(0)  {
  (void)_alloc;
    }



   typedef uint32_t _row_type;
  _row_type row;

   typedef uint32_t _col_type;
  _col_type col;

   typedef uint32_t _num_type;
  _num_type num;





  typedef boost::shared_ptr< ::mover_client::grid_num_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mover_client::grid_num_<ContainerAllocator> const> ConstPtr;

}; // struct grid_num_

typedef ::mover_client::grid_num_<std::allocator<void> > grid_num;

typedef boost::shared_ptr< ::mover_client::grid_num > grid_numPtr;
typedef boost::shared_ptr< ::mover_client::grid_num const> grid_numConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mover_client::grid_num_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mover_client::grid_num_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mover_client::grid_num_<ContainerAllocator1> & lhs, const ::mover_client::grid_num_<ContainerAllocator2> & rhs)
{
  return lhs.row == rhs.row &&
    lhs.col == rhs.col &&
    lhs.num == rhs.num;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mover_client::grid_num_<ContainerAllocator1> & lhs, const ::mover_client::grid_num_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mover_client

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mover_client::grid_num_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mover_client::grid_num_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mover_client::grid_num_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mover_client::grid_num_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mover_client::grid_num_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mover_client::grid_num_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mover_client::grid_num_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6197da302b9cc329eda7a2732cc26877";
  }

  static const char* value(const ::mover_client::grid_num_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6197da302b9cc329ULL;
  static const uint64_t static_value2 = 0xeda7a2732cc26877ULL;
};

template<class ContainerAllocator>
struct DataType< ::mover_client::grid_num_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mover_client/grid_num";
  }

  static const char* value(const ::mover_client::grid_num_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mover_client::grid_num_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 row\n"
"uint32 col\n"
"uint32 num\n"
;
  }

  static const char* value(const ::mover_client::grid_num_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mover_client::grid_num_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.row);
      stream.next(m.col);
      stream.next(m.num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct grid_num_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mover_client::grid_num_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mover_client::grid_num_<ContainerAllocator>& v)
  {
    s << indent << "row: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.row);
    s << indent << "col: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.col);
    s << indent << "num: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVER_CLIENT_MESSAGE_GRID_NUM_H
