// Generated by gencpp from file mover_client/grid_num_vector.msg
// DO NOT EDIT!


#ifndef MOVER_CLIENT_MESSAGE_GRID_NUM_VECTOR_H
#define MOVER_CLIENT_MESSAGE_GRID_NUM_VECTOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mover_client/grid_num.h>

namespace mover_client
{
template <class ContainerAllocator>
struct grid_num_vector_
{
  typedef grid_num_vector_<ContainerAllocator> Type;

  grid_num_vector_()
    : numbered_grids()  {
    }
  grid_num_vector_(const ContainerAllocator& _alloc)
    : numbered_grids(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::mover_client::grid_num_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::mover_client::grid_num_<ContainerAllocator> >> _numbered_grids_type;
  _numbered_grids_type numbered_grids;





  typedef boost::shared_ptr< ::mover_client::grid_num_vector_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mover_client::grid_num_vector_<ContainerAllocator> const> ConstPtr;

}; // struct grid_num_vector_

typedef ::mover_client::grid_num_vector_<std::allocator<void> > grid_num_vector;

typedef boost::shared_ptr< ::mover_client::grid_num_vector > grid_num_vectorPtr;
typedef boost::shared_ptr< ::mover_client::grid_num_vector const> grid_num_vectorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mover_client::grid_num_vector_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mover_client::grid_num_vector_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mover_client::grid_num_vector_<ContainerAllocator1> & lhs, const ::mover_client::grid_num_vector_<ContainerAllocator2> & rhs)
{
  return lhs.numbered_grids == rhs.numbered_grids;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mover_client::grid_num_vector_<ContainerAllocator1> & lhs, const ::mover_client::grid_num_vector_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mover_client

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mover_client::grid_num_vector_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mover_client::grid_num_vector_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mover_client::grid_num_vector_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mover_client::grid_num_vector_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mover_client::grid_num_vector_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mover_client::grid_num_vector_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mover_client::grid_num_vector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "93d1cb10c3e6ec95919ceb70fdb3e870";
  }

  static const char* value(const ::mover_client::grid_num_vector_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x93d1cb10c3e6ec95ULL;
  static const uint64_t static_value2 = 0x919ceb70fdb3e870ULL;
};

template<class ContainerAllocator>
struct DataType< ::mover_client::grid_num_vector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mover_client/grid_num_vector";
  }

  static const char* value(const ::mover_client::grid_num_vector_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mover_client::grid_num_vector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "grid_num[] numbered_grids\n"
"\n"
"================================================================================\n"
"MSG: mover_client/grid_num\n"
"uint32 row\n"
"uint32 col\n"
"uint32 num\n"
;
  }

  static const char* value(const ::mover_client::grid_num_vector_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mover_client::grid_num_vector_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.numbered_grids);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct grid_num_vector_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mover_client::grid_num_vector_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mover_client::grid_num_vector_<ContainerAllocator>& v)
  {
    s << indent << "numbered_grids[]" << std::endl;
    for (size_t i = 0; i < v.numbered_grids.size(); ++i)
    {
      s << indent << "  numbered_grids[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mover_client::grid_num_<ContainerAllocator> >::stream(s, indent + "    ", v.numbered_grids[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVER_CLIENT_MESSAGE_GRID_NUM_VECTOR_H
